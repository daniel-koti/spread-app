generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ENABLED
  DISABLED
}

enum ApproveStatus {
  APPROVED
  RECUSED
}

enum TransactionsType {
  INCOME
  OUTCOME
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password_hash String
  is_admin      Boolean  @default(false)
  status        Status   @default(ENABLED)
  created_at    DateTime @default(now())

  wallet    Wallet   @relation(fields: [wallet_id], references: [id])
  wallet_id String   @unique
  Ticket    Ticket[]

  @@map("users")
}

model Producer {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password_hash String
  phone         String
  nif           String
  company       Boolean
  status        Status   @default(ENABLED)
  created_at    DateTime @default(now())

  wallet    Wallet @relation(fields: [wallet_id], references: [id])
  wallet_id String @unique

  Event      Event[]
  Disclosure Disclosure[]

  @@map("producers")
}

model Wallet {
  id          String        @id @default(cuid())
  amount      Decimal       @default(0.0)
  created_at  DateTime      @default(now())
  User        User?
  Producer    Producer?
  Transaction Transaction[]

  @@map("wallets")
}

model Transaction {
  id          String           @id @default(cuid())
  type        TransactionsType
  description String
  price       Decimal
  created_at  DateTime         @default(now())

  wallet    Wallet @relation(fields: [wallet_id], references: [id])
  wallet_id String

  Disclosure Disclosure?
  Ticket     Ticket?

  @@map("transactions")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  date_start  DateTime
  date_end    DateTime
  hour_start  String
  hour_end    String
  address     String
  type        String
  latitude    Decimal?
  longitude   Decimal?
  status      Status    @default(ENABLED)
  disclosed   DateTime?
  created_at  DateTime  @default(now())

  categoryEvent CategoryEvent @relation(fields: [category_id], references: [id])
  category_id   String

  producer    Producer @relation(fields: [producer_id], references: [id])
  producer_id String

  Coupon     Coupon[]
  Disclosure Disclosure?
  Ticket     Ticket[]

  @@map("events")
}

model Coupon {
  id    String  @id @default(cuid())
  price Decimal

  event    Event  @relation(fields: [event_id], references: [id])
  event_id String

  coupon_type    CouponType @relation(fields: [coupon_type_id], references: [id])
  coupon_type_id String

  ticket Ticket[]

  @@map("coupons")
}

model CouponType {
  id   String @id @default(cuid())
  name String

  Coupon Coupon[]

  @@map("coupon_types")
}

model CategoryEvent {
  id    String  @id @default(cuid())
  name  String
  Event Event[]

  @@map("category_events")
}

model Disclosure {
  id             String        @id @default(cuid())
  approve_status ApproveStatus @default(APPROVED)

  producer    Producer @relation(fields: [producer_id], references: [id])
  producer_id String   @unique

  event    Event  @relation(fields: [event_id], references: [id])
  event_id String @unique

  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  transaction_id String      @unique

  @@map("disclosures")
}

model Ticket {
  id             String        @id @default(cuid())
  approve_status ApproveStatus @default(APPROVED)
  reference      String        @unique
  created_at     DateTime      @default(now())

  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  transaction_id String      @unique

  event    Event  @relation(fields: [event_id], references: [id])
  event_id String

  coupon    Coupon @relation(fields: [coupon_id], references: [id])
  coupon_id String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique

  @@map("tickets")
}
